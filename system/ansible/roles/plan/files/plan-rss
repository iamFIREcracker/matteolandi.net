#!/usr/bin/env bash

set -e

NOW=$(date -R)

# Input stream {{{

LAST_READ_LINE_FILE="$PWD/last-read" && touch $LAST_READ_LINE_FILE
END_OF_INPUT_FILE="$PWD/end-of-input" && touch $END_OF_INPUT_FILE
trap "rm $LAST_READ_LINE_FILE $END_OF_INPUT_FILE" EXIT

function read_next() {
  local line

  while IFS= read line; do
    echo "$line" > $LAST_READ_LINE_FILE
    return
  done
  echo 1 > $END_OF_INPUT_FILE
}

function read_from() {
  local file="$1"

  cat "$file" 2>/dev/null
}

function peek_next() {
  read_from $LAST_READ_LINE_FILE
}

function end_of_input() {
  read_from $END_OF_INPUT_FILE
}

# }}}
# Utils {{{

function next_is_dayheader() {
  peek_next | grep -E '# [0-9]{4}-' || true
}

function read_until_dayheader() {
  if [ -n "$(end_of_input)" ]; then
    return
  elif [ -n "$(next_is_dayheader)" ]; then
    return
  else
    peek_next
    read_next
    read_until_dayheader
  fi
}

function xmlescape() {
  local data="$1"

  # https://stackoverflow.com/a/12873723
  echo "$data" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g'
}

function pre_wrap() {
  local data="$1"

  echo "<pre>$data</pre>"
}

function cdata_wrap() {
  local data="$1"

  echo "<![CDATA[$data]]>"
}


# }}}
# Item {{{

function item_title_data() {
  peek_next | cut -d' ' -f2
}
function item_title() {
  echo "<title>$(item_title_data)</title>"
  read_next
}

function item_link_data() {
  echo 'https://matteolandi.net/.plan'
}
function item_link() {
  echo "<link>$(item_link_data)</link>"
}

function item_description_data() {
  read_until_dayheader
}
function item_description() {
  local data

  data=$(item_description_data)
  data=$(xmlescape "$data")
  data=$(pre_wrap "$data")
  data=$(cdata_wrap "$data")

  echo "<description>$data</description>"
}

function item_hashable_content() {
  cat <<EOF
$(item_title)
$(item_link)
$(item_description)
EOF
}

function item_pubdate_data() {
  local title="$1"
  local content="$2"

  local cachedir="$PWD/item-$title"
  local cachedcontentfile="$cachedir/content"
  local cacheddatefile="$cachedir/date"
  mkdir -p $cachedir
  touch $cachedcontentfile $cacheddatefile

  if [ "$content" = "$(read_from "$cachedcontentfile")" ]; then
    read_from "$cacheddatefile"
  else
    echo "$content" > "$cachedcontentfile"
    echo $NOW > "$cacheddatefile"
    echo $NOW
  fi
}
function item_pubdate() {
  local title="$1"
  local content="$2"

  echo "<pubDate>$(item_pubdate_data "$title" "$content")</pubDate>"
}

function item_guid_data() {
  local content="$1"

  echo -n "$content" | sha512sum | cut -d' ' -f1
}
function item_guid() {
  local content="$1"

  echo "<guid isPermaLink=\"false\">$(item_guid_data "$content")</guid>"
}

function item_content() {
  local title=$(item_title_data)
  local hashable_content="$(item_hashable_content)"

  cat <<EOF
$hashable_content
$(item_pubdate "$title" "$hashable_content")
$(item_guid "$hashable_content")
EOF
}

function item() {
  local content=$(item_content)
  cat <<EOF
<item>
$content
</item>
EOF
}

# }}}
# Channel {{{

function channel_title_data() {
  echo "Matteo Landi's log"
}
function channel_title() {
  echo "<title>$(channel_title_data)</title>"
}

function channel_link_data() {
  echo 'https://matteolandi.net/plan.xml'
}
function channel_link() {
  echo "<link>$(channel_link_data)</link>"
}

function channel_atomlink() {
  echo '<atom:link href="'$(channel_link_data)'" rel="self" type="application/rss+xml" />'
}

function channel_generator() {
  echo '<generator>plan-rss</generator>'
}

function channel_language_data() {
  echo 'en-us'
}
function channel_language() {
  echo "<language>$(channel_language_data)</language>"
}

function channel_description_data() {
  read_until_dayheader
}
function channel_description() {
  local data

  # The specification lacks clarity on whether we could
  # use HTML for channel > description, or not -- use plain
  # text then
  data=$(channel_description_data)

  echo "<description>$data</description>"
}

function channel_pubdate_data() {
  date -R
}
function channel_pubdate() {
  echo "<pubDate>$(channel_pubdate_data)</pubDate>"
}

function channel_items() {
  local remaining="$1"

  if [ $remaining -eq 0 ]; then
    return
  elif [ -n "$(end_of_input)" ]; then
    return
  else
    item
    channel_items $(($remaining - 1))
  fi
}

# }}}

function generate() {
  read_next
  cat <<EOF
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
$(channel_title)
$(channel_link)
$(channel_atomlink)
$(channel_generator)
$(channel_description)
$(channel_language)
$(channel_pubdate)
EOF
  channel_items 10 # break the previous `cat' so we can start emitting data early
  cat <<EOF
</channel>
</rss>
EOF
}

generate
